#!/bin/bash

# Informations de diagnostic
echo "=== Informations de diagnostic ==="
echo "Contenu de /etc/hosts:"
cat /etc/hosts
echo "=== Fin des informations de diagnostic ==="

# Attendre que PostgreSQL soit pr√™t (d√©lai suppl√©mentaire)
echo "Attente initiale pour laisser PostgreSQL d√©marrer..."
sleep 10

# Attendre que la base de donn√©es soit disponible
echo "Attente de la disponibilit√© de la base de donn√©es PostgreSQL..."
for i in {1..30}; do
  echo "Tentative $i: Test de connexion √† PostgreSQL..."
  
  # Afficher plus d'informations pour le diagnostic
  echo "Ping db:"
  ping -c 1 db || echo "Ping √©chou√©"
  
  # Tester la connexion avec plus de d√©tails
  PGPASSWORD=postgres psql -h db -U postgres -c "SELECT 1" -v ON_ERROR_STOP=1
  if [ $? -eq 0 ]; then
    echo "Base de donn√©es PostgreSQL disponible apr√®s $i tentatives."
    break
  fi
  
  echo "Tentative $i: Base de donn√©es PostgreSQL non disponible, attente..."
  sleep 5
  
  if [ $i -eq 30 ]; then
    echo "√âchec de connexion √† PostgreSQL apr√®s 30 tentatives."
    exit 1
  fi
done

# Cr√©er la base de donn√©es de test si elle n'existe pas
echo "V√©rification de la base de donn√©es de test..."
PGPASSWORD=postgres psql -h db -U postgres -c "SELECT 1 FROM pg_database WHERE datname = 'lon_test_db'" | grep -q 1
if [ $? -ne 0 ]; then
    echo "Cr√©ation de la base de donn√©es de test..."
    PGPASSWORD=postgres psql -h db -U postgres -c "CREATE DATABASE lon_test_db"
    if [ $? -ne 0 ]; then
        echo "√âchec de cr√©ation de la base de donn√©es lon_test_db."
        exit 1
    fi
    echo "Base de donn√©es lon_test_db cr√©√©e avec succ√®s."
fi

# Ex√©cuter les migrations sur la base de donn√©es de test
echo "Ex√©cution des migrations..."
python manage.py migrate --noinput

# Options de pytest communes
PYTEST_OPTIONS="--reuse-db -v"

# Ex√©cuter les tests en fonction du param√®tre
if [ "$1" = "api" ]; then
    echo "Ex√©cution des tests d'API..."
    python -m pytest tests/api $PYTEST_OPTIONS
elif [ "$1" = "unit" ]; then
    echo "Ex√©cution des tests unitaires des mod√®les..."
    python -m pytest api/tests.py projects/tests.py $PYTEST_OPTIONS
elif [ "$1" = "health" ]; then
    echo "Ex√©cution des tests health-check..."
    python -m pytest tests/api/test_health_check.py $PYTEST_OPTIONS
elif [ "$1" = "reset-db" ]; then
    echo "R√©initialisation de la base de donn√©es de test..."
    # Tuer toutes les connexions √† la base de donn√©es de test
    PGPASSWORD=postgres psql -h db -U postgres -c "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = 'lon_test_db' AND pid <> pg_backend_pid();"
    # Supprimer la base de donn√©es de test
    PGPASSWORD=postgres psql -h db -U postgres -c "DROP DATABASE IF EXISTS lon_test_db;"
    # Recr√©er la base de donn√©es de test
    PGPASSWORD=postgres psql -h db -U postgres -c "CREATE DATABASE lon_test_db;"
    echo "Base de donn√©es de test r√©initialis√©e."
    exit 0
else
    echo "Ex√©cution des tests essentiels..."
    # Ex√©cuter uniquement les tests API les plus fiables
    python -m pytest tests/api/test_health_check.py api/tests.py $PYTEST_OPTIONS
fi

# R√©cup√©rer le code de sortie de pytest
EXIT_CODE=$?

# Afficher un message en fonction du r√©sultat
if [ $EXIT_CODE -eq 0 ]; then
    echo "Tous les tests ont r√©ussi! üéâ"
else
    echo "Certains tests ont √©chou√©. üò¢"
fi

# Sortir avec le code de sortie de pytest
exit $EXIT_CODE 