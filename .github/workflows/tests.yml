name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lon_test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd lon
        pip install -r test-requirements.txt
    
    - name: Setup Chrome
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: 'stable'
        
    - name: Verify Chrome and ChromeDriver
      run: |
        google-chrome --version
        python -c "from webdriver_manager.chrome import ChromeDriverManager; ChromeDriverManager().install()"
      env:
        WDM_LOG_LEVEL: '0'
    
    - name: Run migrations
      working-directory: lon
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DEBUG: '1'
        SECRET_KEY: 'test_key_for_running_tests'
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
      run: |
        # Réinitialiser complètement la base de données
        echo "Réinitialisation de la base de données..."
        PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS lon_test_db;"
        PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE lon_test_db;"

        # Vérifier la configuration
        echo "Vérification de la configuration..."
        python -c "import django, os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lon.settings_ci'); django.setup(); from django.conf import settings; print('AUTH_USER_MODEL:', settings.AUTH_USER_MODEL);"
        
        # Vérifier si les fichiers de migration existent
        echo "Vérification des fichiers de migration..."
        if [ ! -d "accounts/migrations" ] || [ ! "$(ls -A accounts/migrations/)" ]; then
            echo "Aucune migration trouvée pour accounts, création des répertoires..."
            mkdir -p accounts/migrations
            touch accounts/migrations/__init__.py
            
            # Créer une migration initiale minimale
            echo "Création d'une migration initiale manuelle..."
            cat > accounts/migrations/0001_initial.py << EOL
from django.db import migrations, models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone

class Migration(migrations.Migration):
    initial = True
    dependencies = [
        ('auth', '0001_initial'),
    ]
    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, verbose_name='Téléphone')),
                ('function', models.CharField(blank=True, max_length=100, null=True, verbose_name='Fonction')),
                ('company', models.CharField(blank=True, max_length=100, null=True, verbose_name='Entreprise')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
EOL
            echo "Migration initiale pour accounts créée manuellement."
        else
            echo "Des migrations pour accounts existent déjà."
            ls -la accounts/migrations/
        fi

        # Essayer une migration normale
        echo "Tentative de migration standard..."
        python manage.py makemigrations accounts --noinput
        
        if ! python manage.py migrate accounts --noinput; then
            # Si la migration échoue, essayer de créer la table manuellement
            echo "Migration de accounts a échoué, tentative de création manuelle des tables..."
            python create_accounts_tables.py
        fi
        
        # Continuer avec les autres migrations
        echo "Création et application des autres migrations..."
        python manage.py makemigrations --noinput
        python manage.py migrate --noinput
        
        # Vérifier les tables créées
        echo "Tables dans la base de données:"
        PGPASSWORD=postgres psql -h localhost -U postgres -d lon_test_db -c "\dt"
        echo "Table accounts_user:"
        PGPASSWORD=postgres psql -h localhost -U postgres -d lon_test_db -c "\d accounts_user" || echo "Table accounts_user n'existe pas!"
        
        # Vérifier si on peut créer un utilisateur
        echo "Test de création d'utilisateur..."
        python manage.py shell -c "from accounts.models import User; User.objects.create_user('testuser', 'test@example.com', 'password'); print('Utilisateur créé avec succès')" || echo "Échec de création d'utilisateur"
    
    - name: Run backend unit tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DEBUG: '1'
        SECRET_KEY: 'test_key_for_running_tests'
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
      run: |
        cd lon
        pytest projects/tests.py tasks/tests.py -v
    
    - name: Run database tests separately
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DEBUG: '1'
        SECRET_KEY: 'test_key_for_running_tests'
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
      run: |
        cd lon
        pytest api/tests.py::DatabaseConnectionTest -v
    
    - name: Create admin user for tests
      working-directory: lon
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
      run: |
        # Afficher d'abord la structure de la base de données
        echo "Structure de la base de données avant création utilisateur:"
        PGPASSWORD=postgres psql -h localhost -U postgres -d lon_test_db -c "\dt"
        PGPASSWORD=postgres psql -h localhost -U postgres -d lon_test_db -c "\dt accounts*"
        
        # Vérifier si le modèle User est correctement chargé
        echo "Vérification du modèle User dans Django:"
        python -c "import django, os, sys; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lon.settings_ci'); django.setup(); from django.apps import apps; from django.conf import settings; print('AUTH_USER_MODEL:', settings.AUTH_USER_MODEL); User = apps.get_model(settings.AUTH_USER_MODEL); print('User model:', User); print('User model table:', User._meta.db_table);"
  
        # Créer l'utilisateur admin avec gestion d'erreur détaillée
        echo "Création de l'utilisateur admin..."
        python manage.py shell -c "from accounts.models import User; import sys, traceback; try: admin_exists = User.objects.filter(username='admin').exists(); print(f'Admin existe: {admin_exists}'); admin_user = User.objects.create_superuser('admin', 'admin@example.com', 'admin') if not admin_exists else None; print('Utilisateur admin créé avec succès' if not admin_exists else 'Admin existe déjà'); except Exception as e: print(f'Erreur: {str(e)}'); print(f'Type: {type(e).__name__}'); traceback.print_exc(); print('Modèles:'); from django.apps import apps; [print(f'- {m._meta.app_label}.{m._meta.model_name}: {m._meta.db_table}') for m in apps.get_models()]; sys.exit(1);"
        
        # Vérifier directement dans la base de données
        echo "Vérification directe dans la base de données..."
        PGPASSWORD=postgres psql -h localhost -U postgres -d lon_test_db -c "SELECT username FROM accounts_user WHERE username='admin';"
    
    - name: Start backend server for e2e tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DEBUG: '1'
        SECRET_KEY: 'test_key_for_running_tests'
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
        ALLOWED_HOSTS: 'localhost,127.0.0.1'
      run: |
        cd lon
        python manage.py runserver &
        # Attendre que le serveur soit prêt
        sleep 5
      
    - name: Build and start frontend
      run: |
        cd lon_front
        npm install
        npm run build
        
    - name: Install Nginx
      run: |
        sudo apt-get update
        sudo apt-get install -y nginx
        
    - name: Configure Nginx for frontend
      run: |
        sudo bash -c 'cat > /etc/nginx/sites-available/default << EOF
        server {
            listen 80;
            server_name localhost;
            
            root $(pwd)/lon_front/dist;
            index index.html;
            
            location / {
                try_files \$uri \$uri/ /index.html;
            }
        }
        EOF'
        sudo systemctl restart nginx
        
    - name: Run API tests
      working-directory: lon
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
      run: |
        python -m pytest api/tests.py -v

    - name: Run PostgreSQL connection tests
      working-directory: lon
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
      run: |
        python -m pytest api/tests.py::DatabaseConnectionTest -v

    - name: Run e2e tests
      working-directory: lon
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
        FRONTEND_URL: 'http://localhost:80'
        API_URL: 'http://localhost:8000/api'
      run: |
        python -m pytest e2e_tests/test_frontend_backend_ci.py -v
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pytest-results
        path: lon/pytest-report.xml 