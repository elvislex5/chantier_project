name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lon_test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd lon
        pip install -r test-requirements.txt
    
    - name: Setup Chrome
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: 'stable'
        
    - name: Verify Chrome and ChromeDriver
      run: |
        google-chrome --version
        python -c "from webdriver_manager.chrome import ChromeDriverManager; ChromeDriverManager().install()"
      env:
        WDM_LOG_LEVEL: '0'
    
    - name: Run migrations
      working-directory: lon
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DEBUG: '1'
        SECRET_KEY: 'test_key_for_running_tests'
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
      run: |
        # 1. Generate initial migrations for accounts explicitly
        python manage.py makemigrations accounts
        
        # 2. Generate other migrations
        python manage.py makemigrations
        
        # 3. Try to migrate accounts app first
        echo "Attempting to migrate accounts app..."
        python manage.py migrate accounts || echo "No migrations for accounts app"
        
        # 4. Run other migrations
        python manage.py migrate
    
    - name: Run backend unit tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DEBUG: '1'
        SECRET_KEY: 'test_key_for_running_tests'
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
      run: |
        cd lon
        pytest projects/tests.py tasks/tests.py -v
    
    - name: Run database tests separately
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DEBUG: '1'
        SECRET_KEY: 'test_key_for_running_tests'
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
      run: |
        cd lon
        pytest api/tests.py::DatabaseConnectionTest -v
    
    - name: Create admin user for tests
      working-directory: lon
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
      run: |
        python manage.py shell -c "from accounts.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'adminpassword')"
    
    - name: Start backend server for e2e tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DEBUG: '1'
        SECRET_KEY: 'test_key_for_running_tests'
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
        ALLOWED_HOSTS: 'localhost,127.0.0.1'
      run: |
        cd lon
        python manage.py runserver &
        # Attendre que le serveur soit prÃªt
        sleep 5
      
    - name: Build and start frontend
      run: |
        cd lon_front
        npm install
        npm run build
        
    - name: Install Nginx
      run: |
        sudo apt-get update
        sudo apt-get install -y nginx
        
    - name: Configure Nginx for frontend
      run: |
        sudo bash -c 'cat > /etc/nginx/sites-available/default << EOF
        server {
            listen 80;
            server_name localhost;
            
            root $(pwd)/lon_front/dist;
            index index.html;
            
            location / {
                try_files \$uri \$uri/ /index.html;
            }
        }
        EOF'
        sudo systemctl restart nginx
        
    - name: Run API tests
      working-directory: lon
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
      run: |
        python -m pytest api/tests.py -v

    - name: Run PostgreSQL connection tests
      working-directory: lon
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
      run: |
        python -m pytest api/tests.py::DatabaseConnectionTest -v

    - name: Run e2e tests
      working-directory: lon
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lon_test_db
        DJANGO_SETTINGS_MODULE: 'lon.settings_ci'
        FRONTEND_URL: 'http://localhost:80'
        API_URL: 'http://localhost:8000/api'
      run: |
        python -m pytest e2e_tests/test_frontend_backend_ci.py -v
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pytest-results
        path: lon/pytest-report.xml 